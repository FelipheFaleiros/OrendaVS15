@model Orenda.Models.Produtos
@*
@{
    ViewBag.Title = "Cadastrar";
}

<h2>Cadastrar</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Produtos</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Quantidade, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Quantidade, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Quantidade, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Validade, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Validade, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Validade, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Preco, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Preco, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Preco, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tempo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Tempo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Tempo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}*@

<div class="midde_cont">
    <div class="container-fluid">
        <div class="row column_title">
            <div class="col-md-12">
                <div class="page_title">
                    <h2>Cadastro de Produtos</h2>
                </div>
            </div>
        </div>
        <div class="row column1">
            <div class="col-md-2"></div>
            <div class="col-md-8">
                <div class="white_shd full margin_bottom_30">
                    <div class="full graph_head">
                        <div class="heading1 margin_0">
                            <h2>Produtos</h2>
                        </div>
                    </div>
                    <section class="ftco-section ftco-no-pb ftco-no-pt">
                        <div class="row">
                            <div class="col-md-12 order-md-last">
                                <div class="login-wrap p-4 p-md-5">
                                    <h3 class="mb-4">Insira os dados para cadastro</h3>
                                    <form action="#" class="signup-form">
                                        <div class="form-group">
                                            @*<label class="label" for="name">Nome do Produto</label>
                                            <input type="text" id="nome" class="form-control" placeholder="produto x">*@
                                            @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "label" })
                                            <div class="label"> 
                                                @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control", @placeholder = "Nome do Produto" } })
                                                @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger " })
                                            </div>

                                        </div>
                                        <div class="form-row">
                                            <div class="form-group col-md-5">
                                                @*<label class="label" for="Registro">Quantidade</label>
                                                <input type="number" id="Quantidade" class="form-control" placeholder="unidade qtd/Kg">*@
                                                @Html.LabelFor(model => model.Quantidade, htmlAttributes: new { @class = "label" })
                                                <div class="label">
                                                    @Html.EditorFor(model => model.Quantidade, new { htmlAttributes = new { @class = "form-control", @type = "number", @placeholder = "Unidade qtd/Kg" } })
                                                    @Html.ValidationMessageFor(model => model.Quantidade, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group col-md-5 offset-md-2">
                                                @*<label class="label" for="Endereço">Validade</label>
                                                <input type="date" id="validade" class="form-control">*@
                                                @Html.LabelFor(model => model.Validade, htmlAttributes: new { @class = "label" })
                                                <div class="label">
                                                    @*<input class="date form-control" type="text" autocomplete="off" id="Validade" placeholder = "dd-mm-aaaa" DateTime.Today.ToString ("dd-MM-aaaa") >*@
                                                    @Html.EditorFor(model => model.Validade, new { htmlAttributes = new { @class = "form-control", @type="date" } })
                                                    @Html.ValidationMessageFor(model => model.Validade, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-row">
                                            <div class="form-group col-md-5">
                                                @*<label class="label" for="Cidade">Preço R$:</label>
                                                <input class="form-control" id="preco" onkeypress="mascaraDinheiro(this,mreais)" placeholder="1000.00" )>*@
                                                @Html.LabelFor(model => model.Preco,"Preço R$:", htmlAttributes: new { @class = "label" })
                                                <div class="label">
                                                    @Html.EditorFor(model => model.Preco, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off", @onkeypress = "mascaraDinheiro(this,mreais)", @placeholder = "1000.00" } })
                                                    @Html.ValidationMessageFor(model => model.Preco, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group col-md-5 offset-md-2">
                                                @*<label class="label" for="Estado">Tempo de Produção</label>
                                                <input type="text" step='1' min="00:00:00" max="20:00:00" id="tempo" class="form-control">*@
                                                @Html.LabelFor(model => model.Tempo, htmlAttributes: new { @class = "control-label col-md-2" })
                                                <div class="label">
                                                    @Html.EditorFor(model => model.Tempo, new { htmlAttributes = new { @class = "form-control", @type = "time", @min = "00:00:00", @max = "23:59:59" } })
                                                    @*<input id = "appt-time " type="datetime-local" timeObject.max = hh:mm:ss.ms min="00:00:00" max="23:59:59"/>*@
                                                    @Html.ValidationMessageFor(model => model.Tempo, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div><br>
                                        <p class="text-center">Todos os dados estão corretos?</p>
                                        <div class="form-group d-flex justify-content-end mt-4">
                                            <button type="submit" onclick="CriarCadastroProduto()" class="btn btn-primary submit"><span class="fa fa-paper-plane"></span></button>
                                        </div>

                                        
                                    </form>

                                </div>
                            </div>
                        </div>
                    </section>
                </div>
            </div>
        </div>
    </div>
</div>

<script>

    function mascaraDinheiro(o, f) {
        v_obj = o
        v_fun = f
        setTimeout("execmascara()", 1)
    }

    function execmascara() {
        v_obj.value = v_fun(v_obj.value)
    }

    function mreais(v) {
        v = v.replace(/\D/g, "") //Remove tudo o que não é dígito
        v = v.replace(/(\d{2})$/, ".$1") //Coloca a virgula
        //v = v.replace(/(\d+)(\d{3},\d{2})$/g, "$1.$2") //Coloca o primeiro ponto
            return v;

    }
    function CriarCadastroProduto() {
        debugger;
        var cadastrar = {
            nome: $("#nome").val(),
            quantidade: $("#quantidade").val(),
            validade: $("#validade").val(),
            preco: $("#preco").val().replace(".", "."),
            tempo: $("#tempo").val(),
        }
        console.log(cadastrar);
        cadastrar.preco = parseFloat($("#preco").val().replace(",", "."));
        $.post('@Url.Action("Cadastrar", "Produto")', cadastrar)

            .done(function(mensage) {
                alert("Cadastro Realizado")
            })
            .fail(function(error) {
                console.log(error.responseText);
            });
    }


</script>